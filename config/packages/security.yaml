security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
    
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_api_user
            
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~

        main:
            lazy: true
            provider: app_user_provider
        
            form_login:
                # "app_auth_login" is the name of the route created previously
                login_path: app_auth_login
                check_path: app_auth_login
                default_target_path: app_back_home

            # logout
            logout:
                # chemin ou nom de route
                path: app_auth_logout
                target: app_back_home


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         # API
         - { path: ^/api/user/id/dmfc, roles: ROLE_DMFC, methods: UPDATE }
         - { path: ^/api/users, roles: ROLE_ADMIN }
         - { path: ^/api/user/new, roles: PUBLIC_ACCESS }
         - { path: ^/api/user, roles: ROLE_ADMIN, methods: DELETE }
         - { path: ^/api/user/id, roles: ROLE_JOUEUR, methods: UPDATE }
         - { path: ^/api/league/new, roles: PUBLIC_ACCESS }
         - { path: ^/api/leagues, roles: PUBLIC_ACCESS }
         - { path: ^/api/league, roles: ROLE_JOUEUR }
         - { path: ^/api/leagues/id, roles: ROLE_ADMIN, methods: DELETE}
         - { path: ^/api/leagues/id, roles: ROLE_DMFC, methods: UPDATE}
         - { path: ^/api/league/id/users/leaderbord, roles: ROLE_JOUEUR }
         - { path: ^/api/news/new, roles: ROLE_DMFC }
         - { path: ^/api/news, roles: PUBLIC_ACCESS }
         - { path: ^/api/news, roles: ROLE_JOUEUR }
         - { path: ^/api/prediction/new, roles: ROLE_JOUEUR }
         - { path: ^/api/prediction, roles: ROLE_JOUEUR, methods: UPDATE }
         - { path: ^/api/prediction, roles: ROLE_ADMIN, methods: DELETE }
         - { path: ^/api/round/new, roles: ROLE_DMFC }
         - { path: ^/api/round, roles: ROLE_DMFC, methods: UPDATE }
         - { path: ^/api/round, roles: ROLE_DMFC, methods: DELETE }
         - { path: ^/api/seasons, roles: ROLE_JOUEUR }
         - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

         # Back
         - { path: ^/back/logout, roles: PUBLIC_ACCESS }
         - { path: ^/back/login, roles: PUBLIC_ACCESS }
         - { path: ^/back/home, roles: PUBLIC_ACCESS }
         - { path: ^/back, roles: ROLE_ADMIN }


    role_hierarchy:
        ROLE_ADMIN:     ROLE_DMFC
        ROLE_DMFC:      ROLE_JOUEUR

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
                